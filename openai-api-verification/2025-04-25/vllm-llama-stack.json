{"created": 1745547232.2887943, "duration": 69.17680811882019, "exitcode": 1, "root": "/actions-runner/_work/lls-openai-client/lls-openai-client", "environment": {}, "summary": {"passed": 27, "skipped": 4, "failed": 7, "total": 38, "collected": 38}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "type": "Module"}]}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 183}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 202}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 271}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 295}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 323}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 347}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 374}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 397}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "type": "Function", "lineno": 599}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "type": "Function", "lineno": 599}]}], "tests": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "earth"}, "setup": {"duration": 0.03377969699999994, "outcome": "passed"}, "call": {"duration": 0.39027716399994006, "outcome": "passed"}, "teardown": {"duration": 0.0001744649999864123, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "saturn"}, "setup": {"duration": 0.006847811999932674, "outcome": "passed"}, "call": {"duration": 0.9308911370000033, "outcome": "passed"}, "teardown": {"duration": 0.00012922300004447607, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "earth"}, "setup": {"duration": 0.006807700999956978, "outcome": "passed"}, "call": {"duration": 0.4862571219999836, "outcome": "passed"}, "teardown": {"duration": 0.00015289399993889674, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "saturn"}, "setup": {"duration": 0.006261474999973871, "outcome": "passed"}, "call": {"duration": 1.737448957999959, "outcome": "passed"}, "teardown": {"duration": 0.00017043499997271283, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_missing"}, "setup": {"duration": 0.006318986999986009, "outcome": "passed"}, "call": {"duration": 0.004321161000007123, "outcome": "passed"}, "teardown": {"duration": 0.00023253599999861763, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.00677101999997376, "outcome": "passed"}, "call": {"duration": 0.0038900789999161134, "outcome": "passed"}, "teardown": {"duration": 0.00011912299999039533, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.006765839999957279, "outcome": "passed"}, "call": {"duration": 0.1308547380000391, "outcome": "passed"}, "teardown": {"duration": 0.000122734000001401, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.006757609000032971, "outcome": "passed"}, "call": {"duration": 0.07538989399995444, "outcome": "passed"}, "teardown": {"duration": 0.00012395299995660025, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.00669614800006002, "outcome": "passed"}, "call": {"duration": 0.20654231000003165, "outcome": "passed"}, "teardown": {"duration": 0.00017204400000991882, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_missing"}, "setup": {"duration": 0.007213182999976198, "outcome": "passed"}, "call": {"duration": 0.353829348999966, "outcome": "passed"}, "teardown": {"duration": 0.00014965399998345674, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006898663000015404, "outcome": "passed"}, "call": {"duration": 0.003896008999959122, "outcome": "passed"}, "teardown": {"duration": 0.00011606400005348405, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.006788601000039307, "outcome": "passed"}, "call": {"duration": 0.08084453599997232, "outcome": "passed"}, "teardown": {"duration": 0.0001407439999638882, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.006873603000030926, "outcome": "passed"}, "call": {"duration": 0.06271297800003595, "outcome": "passed"}, "teardown": {"duration": 0.00014582400001472706, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.006796410999982072, "outcome": "passed"}, "call": {"duration": 0.08184347400003844, "outcome": "passed"}, "teardown": {"duration": 0.0001365639999448831, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 183, "outcome": "skipped", "keywords": ["test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.016570245000025352, "outcome": "passed"}, "call": {"duration": 0.00012257299999873794, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 192, 'Skipped: Skipping test_chat_non_streaming_image for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.0001121130000001358, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 202, "outcome": "skipped", "keywords": ["test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.00621851500000048, "outcome": "passed"}, "call": {"duration": 0.00010277399996994063, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 211, 'Skipped: Skipping test_chat_streaming_image for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.00010988299993641704, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "calendar"}, "setup": {"duration": 0.00601621900000282, "outcome": "passed"}, "call": {"duration": 1.684250135999946, "outcome": "passed"}, "teardown": {"duration": 0.0001543839999840202, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "math"}, "setup": {"duration": 0.006619585000066763, "outcome": "passed"}, "call": {"duration": 12.436606969000081, "outcome": "passed"}, "teardown": {"duration": 0.00014838499998859334, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "calendar"}, "setup": {"duration": 0.006494023000072957, "outcome": "passed"}, "call": {"duration": 1.8607752350000055, "outcome": "passed"}, "teardown": {"duration": 0.00013629399995807034, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "math"}, "setup": {"duration": 0.006413182000073903, "outcome": "passed"}, "call": {"duration": 13.745060978999959, "outcome": "passed"}, "teardown": {"duration": 0.00014483400002518465, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 271, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006344119000004866, "outcome": "passed"}, "call": {"duration": 1.516654754000001, "outcome": "passed"}, "teardown": {"duration": 0.00012601299999914772, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 295, "outcome": "passed", "keywords": ["test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006090713000048709, "outcome": "passed"}, "call": {"duration": 1.5239613689999487, "outcome": "passed"}, "teardown": {"duration": 0.00032081899996683205, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 323, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006187145000012606, "outcome": "passed"}, "call": {"duration": 1.292333828999972, "outcome": "passed"}, "teardown": {"duration": 0.00012184299998807546, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 347, "outcome": "failed", "keywords": ["test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006118013000104838, "outcome": "passed"}, "call": {"duration": 1.290797256000019, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError: Expected tool call when tool_choice='required'\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f159b872b50>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_tool_choice_required(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        stream = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"required\",  # Force tool call\n            stream=True,\n        )\n    \n        _, tool_calls_buffer = _accumulate_streaming_tool_calls(stream)\n    \n>       assert len(tool_calls_buffer) > 0, \"Expected tool call when tool_choice='required'\"\nE       AssertionError: Expected tool call when tool_choice='required'\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/verifications/openai_api/test_chat_completion.py:368: AssertionError"}, "teardown": {"duration": 0.00013393399990491162, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 374, "outcome": "failed", "keywords": ["test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006203325999990739, "outcome": "passed"}, "call": {"duration": 1.1069187260000035, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError: Expected no tool calls when tool_choice='none'\nassert [] is None\n +  where [] = ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n +    where ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f159b82c0d0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_tool_choice_none(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        response = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"none\",\n            stream=False,\n        )\n    \n        assert response.choices[0].message.role == \"assistant\"\n>       assert response.choices[0].message.tool_calls is None, \"Expected no tool calls when tool_choice='none'\"\nE       AssertionError: Expected no tool calls when tool_choice='none'\nE       assert [] is None\nE        +  where [] = ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\nE        +    where ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='To get the current weather conditions in San Francisco, I can search for the latest forecast.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message\n\ntests/verifications/openai_api/test_chat_completion.py:394: AssertionError"}, "teardown": {"duration": 0.000125552999975298, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 397, "outcome": "passed", "keywords": ["test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.00610008299997844, "outcome": "passed"}, "call": {"duration": 1.0575607499999933, "outcome": "passed"}, "teardown": {"duration": 0.000145384000006743, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006168794000018352, "outcome": "passed"}, "call": {"duration": 1.5149522649999199, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 484, "message": "AssertionError: Expected 0 tool calls, but got 1\nassert 1 == 0\n +  where 1 = len(([ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')]))\n +    where [ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')] = ChatCompletionMessage(content=None, refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')], reasoning_content=None).tool_calls"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 484, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f159b98c450>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'text_then_weather_tool', 'expected': [{'answer': ['sol'], 'num_tool_calls': 0}, {'num_tool_calls': 1, 'to...], 'type': 'object'}}, 'type': 'function'}]}, 'tool_responses': [{'response': \"{'response': '70 degrees and foggy'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n>           assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\nE           AssertionError: Expected 0 tool calls, but got 1\nE           assert 1 == 0\nE            +  where 1 = len(([ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')]))\nE            +    where [ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')] = ChatCompletionMessage(content=None, refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='chatcmpl-tool-374da6ec46b7477a8346142075c1872c', function=Function(arguments='{\"location\": \"San Francisco, CA\"}', name='get_weather'), type='function')], reasoning_content=None).tool_calls\n\ntests/verifications/openai_api/test_chat_completion.py:484: AssertionError"}, "teardown": {"duration": 0.00015007499996499973, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006130223000013757, "outcome": "passed"}, "call": {"duration": 2.336425307000013, "outcome": "passed"}, "teardown": {"duration": 0.0001414149999163783, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "add_product_tool"}, "setup": {"duration": 0.006255117000023347, "outcome": "passed"}, "call": {"duration": 3.19939619999991, "outcome": "passed"}, "teardown": {"duration": 0.00013531399997646076, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.0061576340000328855, "outcome": "passed"}, "call": {"duration": 2.7607263380000404, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/.venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1023, "message": "openai.BadRequestError: Error code: 400 - {'detail': \"Error code: 400 - {'object': 'error', 'message': 'This model only supports single tool-calls at once!', 'type': 'BadRequestError', 'param': None, 'code': 400}\"}"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 466, "message": ""}, {"path": ".venv/lib64/python3.11/site-packages/openai/_utils/_utils.py", "lineno": 279, "message": "in wrapper"}, {"path": ".venv/lib64/python3.11/site-packages/openai/resources/chat/completions/completions.py", "lineno": 914, "message": "in create"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1242, "message": "in post"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 919, "message": "in request"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1023, "message": "BadRequestError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f159b8f7690>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'get_then_create_event_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'date': '2025-03-03', ...ents found for 2025-03-03 at 10:00'}\"}, {'response': \"{'response': 'Successfully created new event with id: e_123'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n>           response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n\ntests/verifications/openai_api/test_chat_completion.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib64/python3.11/site-packages/openai/_utils/_utils.py:279: in wrapper\n    return func(*args, **kwargs)\n.venv/lib64/python3.11/site-packages/openai/resources/chat/completions/completions.py:914: in create\n    return self._post(\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:1242: in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:919: in request\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openai.OpenAI object at 0x7f159b8f7690>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        retries_taken: int,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        remaining_retries = options.get_max_retries(self.max_retries) - retries_taken\n        request = self._build_request(options, retries_taken=retries_taken)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n            response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n        except httpx.TimeoutException as err:\n            log.debug(\"Encountered httpx.TimeoutException\", exc_info=True)\n    \n            if remaining_retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising timeout error\")\n            raise APITimeoutError(request=request) from err\n        except Exception as err:\n            log.debug(\"Encountered Exception\", exc_info=True)\n    \n            if remaining_retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising connection error\")\n            raise APIConnectionError(request=request) from err\n    \n        log.debug(\n            'HTTP Response: %s %s \"%i %s\" %s',\n            request.method,\n            request.url,\n            response.status_code,\n            response.reason_phrase,\n            response.headers,\n        )\n        log.debug(\"request_id: %s\", response.headers.get(\"x-request-id\"))\n    \n        try:\n            response.raise_for_status()\n        except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code\n            log.debug(\"Encountered httpx.HTTPStatusError\", exc_info=True)\n    \n            if remaining_retries > 0 and self._should_retry(err.response):\n                err.response.close()\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    response_headers=err.response.headers,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                )\n    \n            # If the response is streamed then we need to explicitly read the response\n            # to completion before attempting to access the response text.\n            if not err.response.is_closed:\n                err.response.read()\n    \n            log.debug(\"Re-raising status error\")\n>           raise self._make_status_error_from_response(err.response) from None\nE           openai.BadRequestError: Error code: 400 - {'detail': \"Error code: 400 - {'object': 'error', 'message': 'This model only supports single tool-calls at once!', 'type': 'BadRequestError', 'param': None, 'code': 400}\"}\n\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:1023: BadRequestError"}, "teardown": {"duration": 0.00014476400008334167, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006294818000014857, "outcome": "passed"}, "call": {"duration": 1.8595777250000083, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f159be62ed0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n            assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                tool_call = assistant_message.tool_calls[0]\n                assert tool_call.function.name == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call.function.name}'\"\n                )\n                # Parse the JSON string arguments before comparing\n                actual_arguments = json.loads(tool_call.function.arguments)\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:495: AssertionError"}, "teardown": {"duration": 0.00013833299999532755, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006149062999952548, "outcome": "passed"}, "call": {"duration": 0.7749796599999854, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 595, "message": "AssertionError: Expected one of ['sol'] in content, but got: 'The provided functions are insufficient for me to answer this question.'\nassert False\n +  where False = any(<generator object test_chat_streaming_multi_turn_tool_calling.<locals>.<genexpr> at 0x7f159bbd7840>)"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 595, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f159b82e1d0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'text_then_weather_tool', 'expected': [{'answer': ['sol'], 'num_tool_calls': 0}, {'num_tool_calls': 1, 'to...], 'type': 'object'}}, 'type': 'function'}]}, 'tool_responses': [{'response': \"{'response': '70 degrees and foggy'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                # Use the first accumulated tool call for assertion\n                tool_call = accumulated_tool_calls[0]\n                assert tool_call[\"function\"][\"name\"] == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call['function']['name']}'\"\n                )\n                # Parse the accumulated arguments string for comparison\n                actual_arguments = json.loads(tool_call[\"function\"][\"arguments\"])\n                assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\n    \n                # Prepare and append the tool response for the next turn\n                tool_response = tool_responses.pop(0)\n                messages.append(\n                    {\n                        \"role\": \"tool\",\n                        \"tool_call_id\": tool_call[\"id\"],\n                        \"content\": tool_response[\"response\"],\n                    }\n                )\n            else:\n                assert accumulated_content is not None and accumulated_content != \"\", \"Expected content, but none received.\"\n                expected_answers = expected[\"answer\"]\n                content_lower = accumulated_content.lower()\n>               assert any(ans.lower() in content_lower for ans in expected_answers), (\n                    f\"Expected one of {expected_answers} in content, but got: '{accumulated_content}'\"\n                )\nE               AssertionError: Expected one of ['sol'] in content, but got: 'The provided functions are insufficient for me to answer this question.'\nE               assert False\nE                +  where False = any(<generator object test_chat_streaming_multi_turn_tool_calling.<locals>.<genexpr> at 0x7f159bbd7840>)\n\ntests/verifications/openai_api/test_chat_completion.py:595: AssertionError"}, "teardown": {"duration": 0.00013232300000254327, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006048700999940593, "outcome": "passed"}, "call": {"duration": 2.8761641779999536, "outcome": "passed"}, "teardown": {"duration": 0.00016930499998579762, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "add_product_tool"}, "setup": {"duration": 0.00635321999993721, "outcome": "passed"}, "call": {"duration": 3.2255886179999607, "outcome": "passed"}, "teardown": {"duration": 0.00013562399999500485, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006202325000003839, "outcome": "passed"}, "call": {"duration": 6.318184229000053, "outcome": "passed"}, "teardown": {"duration": 0.0002832590000707569, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006350590000010925, "outcome": "passed"}, "call": {"duration": 1.5239433579999968, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f159b4b6e90>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                # Use the first accumulated tool call for assertion\n                tool_call = accumulated_tool_calls[0]\n                assert tool_call[\"function\"][\"name\"] == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call['function']['name']}'\"\n                )\n                # Parse the accumulated arguments string for comparison\n                actual_arguments = json.loads(tool_call[\"function\"][\"arguments\"])\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:578: AssertionError"}, "teardown": {"duration": 0.0001339140000027328, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "stream=False"}, "setup": {"duration": 0.006726502000105938, "outcome": "passed"}, "call": {"duration": 0.00011011300000518531, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.00011057300002903503, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "stream=True"}, "setup": {"duration": 0.007098151000036523, "outcome": "passed"}, "call": {"duration": 0.00010048299998288712, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.000613176999991083, "outcome": "passed"}}]}