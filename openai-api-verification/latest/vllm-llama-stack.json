{"created": 1745608285.8638742, "duration": 127.61184287071228, "exitcode": 1, "root": "/actions-runner/_work/lls-openai-client/lls-openai-client", "environment": {}, "summary": {"passed": 27, "skipped": 4, "failed": 7, "total": 38, "collected": 38}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "type": "Module"}]}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 183}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 202}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 271}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 295}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 323}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 347}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 374}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 397}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "type": "Function", "lineno": 599}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "type": "Function", "lineno": 599}]}], "tests": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.03377292499999385, "outcome": "passed"}, "call": {"duration": 0.43988562899994577, "outcome": "passed"}, "teardown": {"duration": 0.000175697000031505, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.006926912000153607, "outcome": "passed"}, "call": {"duration": 1.1389503359998798, "outcome": "passed"}, "teardown": {"duration": 0.0001491470000019035, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.0068681799998557835, "outcome": "passed"}, "call": {"duration": 0.4187538159999349, "outcome": "passed"}, "teardown": {"duration": 0.0001573969998389657, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.00673812399986673, "outcome": "passed"}, "call": {"duration": 0.25287992300013684, "outcome": "passed"}, "teardown": {"duration": 0.00016253699982371472, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.006287505000045712, "outcome": "passed"}, "call": {"duration": 0.004020234999870809, "outcome": "passed"}, "teardown": {"duration": 0.00022469000009550655, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.0060418729999582865, "outcome": "passed"}, "call": {"duration": 0.0036790709998513194, "outcome": "passed"}, "teardown": {"duration": 0.00011329499989187752, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.0059738609998021275, "outcome": "passed"}, "call": {"duration": 0.12964365199991335, "outcome": "passed"}, "teardown": {"duration": 0.0001505760001236922, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.0066774619999705465, "outcome": "passed"}, "call": {"duration": 0.07502842700000656, "outcome": "passed"}, "teardown": {"duration": 0.00011814499998763495, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.0064828330000636925, "outcome": "passed"}, "call": {"duration": 0.20091006299981018, "outcome": "passed"}, "teardown": {"duration": 0.00014897699998073222, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.007001285999876927, "outcome": "passed"}, "call": {"duration": 0.3500805369999398, "outcome": "passed"}, "teardown": {"duration": 0.00013842599992131, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006723073000102886, "outcome": "passed"}, "call": {"duration": 0.003641879000042536, "outcome": "passed"}, "teardown": {"duration": 0.00010686500013434852, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.006563576999951692, "outcome": "passed"}, "call": {"duration": 0.07807984999999462, "outcome": "passed"}, "teardown": {"duration": 0.0001299460000154795, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.006629640000028303, "outcome": "passed"}, "call": {"duration": 0.05941523500018775, "outcome": "passed"}, "teardown": {"duration": 0.0001340960000106861, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.006651821000104974, "outcome": "passed"}, "call": {"duration": 0.07580543999984002, "outcome": "passed"}, "teardown": {"duration": 0.0001352749998204672, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 183, "outcome": "skipped", "keywords": ["test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006652881000036359, "outcome": "passed"}, "call": {"duration": 0.00011290399993413303, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 192, 'Skipped: Skipping test_chat_non_streaming_image for model RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.00010701499991228047, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 202, "outcome": "skipped", "keywords": ["test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.012812029000087932, "outcome": "passed"}, "call": {"duration": 0.00010894499996538798, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 211, 'Skipped: Skipping test_chat_streaming_image for model RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.00012103499989279953, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.006020562999992762, "outcome": "passed"}, "call": {"duration": 1.6578238340000553, "outcome": "passed"}, "teardown": {"duration": 0.00013842600014868367, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.006401358999937656, "outcome": "passed"}, "call": {"duration": 11.666177767999898, "outcome": "passed"}, "teardown": {"duration": 0.00014729700001225865, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.006405549999954019, "outcome": "passed"}, "call": {"duration": 1.8429428709998774, "outcome": "passed"}, "teardown": {"duration": 0.0001353060001747508, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.006416790000002948, "outcome": "passed"}, "call": {"duration": 17.443793199000083, "outcome": "passed"}, "teardown": {"duration": 0.00014686600002278283, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 271, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006368987999849196, "outcome": "passed"}, "call": {"duration": 1.2069012390002172, "outcome": "passed"}, "teardown": {"duration": 0.0001601070000560867, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 295, "outcome": "passed", "keywords": ["test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006206361000067773, "outcome": "passed"}, "call": {"duration": 1.2148260550000032, "outcome": "passed"}, "teardown": {"duration": 0.00018053799999506737, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 323, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006286784999929296, "outcome": "passed"}, "call": {"duration": 1.2700520070000039, "outcome": "passed"}, "teardown": {"duration": 0.00015636699981769198, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 347, "outcome": "failed", "keywords": ["test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006233512000108021, "outcome": "passed"}, "call": {"duration": 1.2658759250000458, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError: Expected tool call when tool_choice='required'\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce35a4490>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_tool_choice_required(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        stream = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"required\",  # Force tool call\n            stream=True,\n        )\n    \n        _, tool_calls_buffer = _accumulate_streaming_tool_calls(stream)\n    \n>       assert len(tool_calls_buffer) > 0, \"Expected tool call when tool_choice='required'\"\nE       AssertionError: Expected tool call when tool_choice='required'\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/verifications/openai_api/test_chat_completion.py:368: AssertionError"}, "teardown": {"duration": 0.00014199600013853342, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 374, "outcome": "failed", "keywords": ["test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006286044000034963, "outcome": "passed"}, "call": {"duration": 25.920152900000176, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError: Expected no tool calls when tool_choice='none'\nassert [] is None\n +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce34c9710>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_tool_choice_none(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        response = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"none\",\n            stream=False,\n        )\n    \n        assert response.choices[0].message.role == \"assistant\"\n>       assert response.choices[0].message.tool_calls is None, \"Expected no tool calls when tool_choice='none'\"\nE       AssertionError: Expected no tool calls when tool_choice='none'\nE       assert [] is None\nE        +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\nE        +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... fog! The weather in San Francisco can be quite unique and varied, even within the same day. Here's a general overview:\\n\\n**Typical Weather Patterns:**\\n\\n1. **Mild and cool:** San Francisco's climate is generally mild and cool, with average temperatures ranging from 48\u00b0F (9\u00b0C) to 67\u00b0F (19\u00b0C) throughout the year.\\n2. **Foggy:** The city is famous for its fog, which can roll in at any time, especially during the summer months (June to September). The fog can bring temperatures down by 10-20\u00b0F (5-10\u00b0C) and make the air feel cool and damp.\\n3. **Windy:** San Francisco is known for its windy conditions, particularly during the afternoon and evening hours. This is due to the city's location on the Pacific coast, where winds blow from the ocean.\\n4. **Rainy season:** The rainy season in San Francisco typically runs from November to March, with most of the city's annual rainfall occurring during these months.\\n\\n**Seasonal Weather:**\\n\\n* **Spring (March to May):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Summer (June to August):** Cool and foggy, with highs in the mid-60s to low 70s (18-22\u00b0C). This is the peak tourist season.\\n* **Fall (September to November):** Mild temperatures, with highs in the mid-60s to low 70s (18-22\u00b0C). Expect some fog and wind.\\n* **Winter (December to February):** Cool and rainy, with highs in the mid-50s to low 60s (13-18\u00b0C).\\n\\n**Tips:**\\n\\n* Dress in layers, as the temperature can drop significantly when the fog rolls in.\\n* Be prepared for wind and fog, especially in the afternoons and evenings.\\n* If you're planning to visit during the summer, don't expect warm weather; it's still quite cool, especially in the mornings and evenings.\\n\\nOverall, San Francisco's weather is known for being unpredictable and changeable, so be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message\n\ntests/verifications/openai_api/test_chat_completion.py:394: AssertionError"}, "teardown": {"duration": 0.0001499269999385433, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 397, "outcome": "passed", "keywords": ["test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006303127000137465, "outcome": "passed"}, "call": {"duration": 27.989906293999866, "outcome": "passed"}, "teardown": {"duration": 0.0001738769999519718, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006380123000099047, "outcome": "passed"}, "call": {"duration": 2.6750789830000485, "outcome": "passed"}, "teardown": {"duration": 0.00013796700000057172, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006459133999896949, "outcome": "passed"}, "call": {"duration": 2.0233767060001355, "outcome": "passed"}, "teardown": {"duration": 0.00015380700006062398, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006360759000017424, "outcome": "passed"}, "call": {"duration": 3.3250745930001813, "outcome": "passed"}, "teardown": {"duration": 0.0001837780000641942, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006292510000093898, "outcome": "passed"}, "call": {"duration": 8.713877929000091, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 484, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))\n +    where [] = ChatCompletionMessage(content='{\"name\": \"create_event\", \"parameters\": {\"date\": \"2025-03-03\", \"time\": \"10:00\", \"location\": \"Main Conference Room\", \"participants\": [\"Alice\", \"Bob\", \"Charlie\"], \"name\": \"Team Building\"}}<|python_end|><|header_start|>assistant<|header_end|>\\n\\n<|python_start|>{\"name\": \"create_event\", \"parameters\": {\"date\": \"2025-03-03\", \"time\": \"10:00\", \"location\": \"Main Conference Room\", \"participants\": [\"Alice\", \"Bob\", \"Charlie\"], \"name\": \"Team Building\"}}<|python_end|>', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 484, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce3231c50>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'get_then_create_event_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'date': '2025-03-03', ...ents found for 2025-03-03 at 10:00'}\"}, {'response': \"{'response': 'Successfully created new event with id: e_123'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n>           assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\nE            +    where [] = ChatCompletionMessage(content='{\"name\": \"create_event\", \"parameters\": {\"date\": \"2025-03-03\", \"time\": \"10:00\", \"location\": \"Main Conference Room\", \"participants\": [\"Alice\", \"Bob\", \"Charlie\"], \"name\": \"Team Building\"}}<|python_end|><|header_start|>assistant<|header_end|>\\n\\n<|python_start|>{\"name\": \"create_event\", \"parameters\": {\"date\": \"2025-03-03\", \"time\": \"10:00\", \"location\": \"Main Conference Room\", \"participants\": [\"Alice\", \"Bob\", \"Charlie\"], \"name\": \"Team Building\"}}<|python_end|>', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n\ntests/verifications/openai_api/test_chat_completion.py:484: AssertionError"}, "teardown": {"duration": 0.000146156000027986, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006254745999967781, "outcome": "passed"}, "call": {"duration": 1.4867058110000926, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce35ae190>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n            assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                tool_call = assistant_message.tool_calls[0]\n                assert tool_call.function.name == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call.function.name}'\"\n                )\n                # Parse the JSON string arguments before comparing\n                actual_arguments = json.loads(tool_call.function.arguments)\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:495: AssertionError"}, "teardown": {"duration": 0.00013977599996906065, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006269756999927267, "outcome": "passed"}, "call": {"duration": 1.9149971599999844, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 566, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 566, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce348ec10>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'text_then_weather_tool', 'expected': [{'answer': ['sol'], 'num_tool_calls': 0}, {'num_tool_calls': 1, 'to...], 'type': 'object'}}, 'type': 'function'}]}, 'tool_responses': [{'response': \"{'response': '70 degrees and foggy'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n>           assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\n\ntests/verifications/openai_api/test_chat_completion.py:566: AssertionError"}, "teardown": {"duration": 0.00013799599992125877, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006257086999994499, "outcome": "passed"}, "call": {"duration": 1.9740489769999385, "outcome": "passed"}, "teardown": {"duration": 0.00013299599982019572, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006249516000025324, "outcome": "passed"}, "call": {"duration": 3.3289687890001005, "outcome": "passed"}, "teardown": {"duration": 0.000167747999967105, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006274070000017673, "outcome": "passed"}, "call": {"duration": 5.290698501999941, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError: Expected arguments '{'name': 'Team Building', 'date': '2025-03-03', 'time': '10:00', 'location': 'Main Conference Room', 'participants': ['Alice', 'Bob', 'Charlie']}', got '{'date': '2025-03-03', 'participants': '[\"Alice\", \"Bob\", \"Charlie\"]', 'name': 'Team Building', 'time': '10:00', 'location': 'Main Conference Room'}'\nassert {'date': '202...arlie\"]', ...} == {'date': '202...harlie'], ...}\n  \n  Omitting 4 identical items, use -vv to show\n  Differing items:\n  {'participants': '[\"Alice\", \"Bob\", \"Charlie\"]'} != {'participants': ['Alice', 'Bob', 'Charlie']}\n  \n  Full diff:\n    {\n        'date': '2025-03-03',\n        'location': 'Main Conference Room',\n        'name': 'Team Building',\n  +     'participants': '[\"Alice\", \"Bob\", \"Charlie\"]',\n  -     'participants': [\n  -         'Alice',\n  -         'Bob',\n  -         'Charlie',\n  -     ],\n        'time': '10:00',\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce3131f10>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'get_then_create_event_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'date': '2025-03-03', ...ents found for 2025-03-03 at 10:00'}\"}, {'response': \"{'response': 'Successfully created new event with id: e_123'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                # Use the first accumulated tool call for assertion\n                tool_call = accumulated_tool_calls[0]\n                assert tool_call[\"function\"][\"name\"] == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call['function']['name']}'\"\n                )\n                # Parse the accumulated arguments string for comparison\n                actual_arguments = json.loads(tool_call[\"function\"][\"arguments\"])\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'name': 'Team Building', 'date': '2025-03-03', 'time': '10:00', 'location': 'Main Conference Room', 'participants': ['Alice', 'Bob', 'Charlie']}', got '{'date': '2025-03-03', 'participants': '[\"Alice\", \"Bob\", \"Charlie\"]', 'name': 'Team Building', 'time': '10:00', 'location': 'Main Conference Room'}'\nE               assert {'date': '202...arlie\"]', ...} == {'date': '202...harlie'], ...}\nE                 \nE                 Omitting 4 identical items, use -vv to show\nE                 Differing items:\nE                 {'participants': '[\"Alice\", \"Bob\", \"Charlie\"]'} != {'participants': ['Alice', 'Bob', 'Charlie']}\nE                 \nE                 Full diff:\nE                   {\nE                       'date': '2025-03-03',\nE                       'location': 'Main Conference Room',\nE                       'name': 'Team Building',\nE                 +     'participants': '[\"Alice\", \"Bob\", \"Charlie\"]',\nE                 -     'participants': [\nE                 -         'Alice',\nE                 -         'Bob',\nE                 -         'Charlie',\nE                 -     ],\nE                       'time': '10:00',\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:578: AssertionError"}, "teardown": {"duration": 0.00014712699999108736, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006302030999904673, "outcome": "passed"}, "call": {"duration": 1.49348874899988, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f5ce325f890>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic'\nprovider = 'vllm-llama-stack'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                # Use the first accumulated tool call for assertion\n                tool_call = accumulated_tool_calls[0]\n                assert tool_call[\"function\"][\"name\"] == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call['function']['name']}'\"\n                )\n                # Parse the accumulated arguments string for comparison\n                actual_arguments = json.loads(tool_call[\"function\"][\"arguments\"])\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:578: AssertionError"}, "teardown": {"duration": 0.00014290700005403778, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=False"}, "setup": {"duration": 0.006837805000031949, "outcome": "passed"}, "call": {"duration": 0.00011022500007129565, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.00010664500018719991, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=True"}, "setup": {"duration": 0.0070972559999518126, "outcome": "passed"}, "call": {"duration": 9.483400003773568e-05, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic on provider vllm-llama-stack based on config.')"}, "teardown": {"duration": 0.0005307030000949453, "outcome": "passed"}}]}