{"created": 1745509520.514741, "duration": 93.78774094581604, "exitcode": 1, "root": "/actions-runner/_work/lls-openai-client/lls-openai-client", "environment": {}, "summary": {"passed": 25, "failed": 9, "skipped": 4, "total": 38, "collected": 38}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "type": "Module"}]}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "type": "Function", "lineno": 96}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "type": "Function", "lineno": 115}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "type": "Function", "lineno": 139}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "type": "Function", "lineno": 160}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 183}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 202}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "type": "Function", "lineno": 226}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "type": "Function", "lineno": 249}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 271}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 295}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 323}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 347}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 374}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "type": "Function", "lineno": 397}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "type": "Function", "lineno": 425}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "type": "Function", "lineno": 516}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "type": "Function", "lineno": 599}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "type": "Function", "lineno": 599}]}], "tests": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "earth"}, "setup": {"duration": 0.03268523899998854, "outcome": "passed"}, "call": {"duration": 1.1323157639999977, "outcome": "passed"}, "teardown": {"duration": 0.00018665499999315216, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "lineno": 96, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "saturn"}, "setup": {"duration": 0.007137133000014728, "outcome": "passed"}, "call": {"duration": 1.8980290850000188, "outcome": "passed"}, "teardown": {"duration": 0.00016005399999130532, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "earth"}, "setup": {"duration": 0.006264450999992732, "outcome": "passed"}, "call": {"duration": 0.47184431499999846, "outcome": "passed"}, "teardown": {"duration": 0.00012850400003117102, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "lineno": 115, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "saturn"}, "setup": {"duration": 0.006726972000024034, "outcome": "passed"}, "call": {"duration": 1.7211169320000295, "outcome": "passed"}, "teardown": {"duration": 0.00018398500003513618, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_missing"}, "setup": {"duration": 0.007050090999996428, "outcome": "passed"}, "call": {"duration": 0.0035658410000110052, "outcome": "passed"}, "teardown": {"duration": 0.00011877300005380675, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006613729999969564, "outcome": "passed"}, "call": {"duration": 0.0035715810000169768, "outcome": "passed"}, "teardown": {"duration": 0.0001122529999975086, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.0065555179999705615, "outcome": "passed"}, "call": {"duration": 0.0034119879999821023, "outcome": "passed"}, "teardown": {"duration": 0.00011195299998689734, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "lineno": 139, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.006552348000013808, "outcome": "passed"}, "call": {"duration": 0.003463748999990912, "outcome": "passed"}, "teardown": {"duration": 0.00011430300003212324, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "lineno": 139, "outcome": "failed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.006599128999994264, "outcome": "passed"}, "call": {"duration": 1.24645519500001, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 158, "message": "AssertionError: assert 400 == 500\n +  where 500 = InternalServerError('Error code: 500').status_code\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 158, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fb86990>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=False,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n>       assert case[\"output\"][\"error\"][\"status_code\"] == e.value.status_code\nE       AssertionError: assert 400 == 500\nE        +  where 500 = InternalServerError('Error code: 500').status_code\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:158: AssertionError"}, "teardown": {"duration": 0.0001253030000043509, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_missing"}, "setup": {"duration": 0.006099977000019408, "outcome": "passed"}, "call": {"duration": 0.0026590479999981653, "outcome": "passed"}, "teardown": {"duration": 0.00011757300001136173, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.00661066899999696, "outcome": "passed"}, "call": {"duration": 0.0031924819999744614, "outcome": "passed"}, "teardown": {"duration": 0.00011006299996552116, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.0060457249999785745, "outcome": "passed"}, "call": {"duration": 0.0032351329999755762, "outcome": "passed"}, "teardown": {"duration": 0.00018901499998946747, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "lineno": 160, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.005948703000001387, "outcome": "passed"}, "call": {"duration": 0.0032607240000288584, "outcome": "passed"}, "teardown": {"duration": 0.00011050300003034863, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "lineno": 160, "outcome": "failed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.005906591999973898, "outcome": "passed"}, "call": {"duration": 1.2350533109999446, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 181, "message": "AssertionError: assert '400' in 'Error code: 500'\n +  where '400' = str(400)\n +  and   'Error code: 500' = InternalServerError('Error code: 500').message\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 181, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_error_handling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fd1c3d0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=True,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n            for _chunk in response:\n                pass\n>       assert str(case[\"output\"][\"error\"][\"status_code\"]) in e.value.message\nE       AssertionError: assert '400' in 'Error code: 500'\nE        +  where '400' = str(400)\nE        +  and   'Error code: 500' = InternalServerError('Error code: 500').message\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:181: AssertionError"}, "teardown": {"duration": 0.00011610299998210394, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 183, "outcome": "skipped", "keywords": ["test_chat_non_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.0060537260000046444, "outcome": "passed"}, "call": {"duration": 0.00010583300002053875, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 192, 'Skipped: Skipping test_chat_non_streaming_image for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm based on config.')"}, "teardown": {"duration": 0.00010613199998488199, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 202, "outcome": "skipped", "keywords": ["test_chat_streaming_image[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006512858000007782, "outcome": "passed"}, "call": {"duration": 0.00010116200002130427, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 211, 'Skipped: Skipping test_chat_streaming_image for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm based on config.')"}, "teardown": {"duration": 0.0001068429999691034, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "calendar"}, "setup": {"duration": 0.00610737700003483, "outcome": "passed"}, "call": {"duration": 5.100286847000007, "outcome": "passed"}, "teardown": {"duration": 0.00014472300000534233, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "lineno": 226, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "math"}, "setup": {"duration": 0.0065597390000107225, "outcome": "passed"}, "call": {"duration": 18.867759413999977, "outcome": "passed"}, "teardown": {"duration": 0.00013319300001057854, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "calendar"}, "setup": {"duration": 0.00645776700002898, "outcome": "passed"}, "call": {"duration": 1.671230324000021, "outcome": "passed"}, "teardown": {"duration": 0.00012121299999989787, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "lineno": 249, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "math"}, "setup": {"duration": 0.006186940000020513, "outcome": "passed"}, "call": {"duration": 12.751157534000015, "outcome": "passed"}, "teardown": {"duration": 0.00014129299995602196, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 271, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006440494999992552, "outcome": "passed"}, "call": {"duration": 1.6607669159999432, "outcome": "passed"}, "teardown": {"duration": 0.0001210239998954421, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 295, "outcome": "passed", "keywords": ["test_chat_streaming_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006089615999940179, "outcome": "passed"}, "call": {"duration": 1.5027836279999747, "outcome": "passed"}, "teardown": {"duration": 0.00014048399998500827, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 323, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006057635000047412, "outcome": "passed"}, "call": {"duration": 1.3411000739999963, "outcome": "passed"}, "teardown": {"duration": 0.00015627400000539637, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 347, "outcome": "failed", "keywords": ["test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006869277000078, "outcome": "passed"}, "call": {"duration": 1.2806775219999054, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError: Expected tool call when tool_choice='required'\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 368, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_tool_choice_required[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fd2d910>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_tool_choice_required(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        stream = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"required\",  # Force tool call\n            stream=True,\n        )\n    \n        _, tool_calls_buffer = _accumulate_streaming_tool_calls(stream)\n    \n>       assert len(tool_calls_buffer) > 0, \"Expected tool call when tool_choice='required'\"\nE       AssertionError: Expected tool call when tool_choice='required'\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/verifications/openai_api/test_chat_completion.py:368: AssertionError"}, "teardown": {"duration": 0.0001404939999929411, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 374, "outcome": "failed", "keywords": ["test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006322962000012922, "outcome": "passed"}, "call": {"duration": 3.033614995999983, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError: Expected no tool calls when tool_choice='none'\nassert [] is None\n +  where [] = ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n +    where ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 394, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fd712d0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_tool_choice_none(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        response = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"none\",\n            stream=False,\n        )\n    \n        assert response.choices[0].message.role == \"assistant\"\n>       assert response.choices[0].message.tool_calls is None, \"Expected no tool calls when tool_choice='none'\"\nE       AssertionError: Expected no tool calls when tool_choice='none'\nE       assert [] is None\nE        +  where [] = ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\nE        +    where ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='To get the most accurate weather information, I recommend checking a reliable weather forecasting service such as the National Weather Service or a weather app. These sources can provide you with the current weather conditions, forecasts, and other relevant information for San Francisco or any other location.', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message\n\ntests/verifications/openai_api/test_chat_completion.py:394: AssertionError"}, "teardown": {"duration": 0.0001481339999145348, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "lineno": 397, "outcome": "passed", "keywords": ["test_chat_streaming_tool_choice_none[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "case0"}, "setup": {"duration": 0.006610980000004929, "outcome": "passed"}, "call": {"duration": 10.749058803000025, "outcome": "passed"}, "teardown": {"duration": 0.00016523399995094223, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006383474000017486, "outcome": "passed"}, "call": {"duration": 0.8643618470000547, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 512, "message": "AssertionError: Expected one of ['sol'] in content, but got: 'The provided functions are insufficient for me to answer this question.'\nassert False\n +  where False = any(<generator object test_chat_non_streaming_multi_turn_tool_calling.<locals>.<genexpr> at 0x7fde3fb2cac0>)"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 512, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fdb2e10>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'text_then_weather_tool', 'expected': [{'answer': ['sol'], 'num_tool_calls': 0}, {'num_tool_calls': 1, 'to...], 'type': 'object'}}, 'type': 'function'}]}, 'tool_responses': [{'response': \"{'response': '70 degrees and foggy'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n            assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                tool_call = assistant_message.tool_calls[0]\n                assert tool_call.function.name == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call.function.name}'\"\n                )\n                # Parse the JSON string arguments before comparing\n                actual_arguments = json.loads(tool_call.function.arguments)\n                assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\n    \n                # Prepare and append the tool response for the next turn\n                tool_response = tool_responses.pop(0)\n                messages.append(\n                    {\n                        \"role\": \"tool\",\n                        \"tool_call_id\": tool_call.id,\n                        \"content\": tool_response[\"response\"],\n                    }\n                )\n            else:\n                assert assistant_message.content is not None, \"Expected content, but none received.\"\n                expected_answers = expected[\"answer\"]  # This is now a list\n                content_lower = assistant_message.content.lower()\n>               assert any(ans.lower() in content_lower for ans in expected_answers), (\n                    f\"Expected one of {expected_answers} in content, but got: '{assistant_message.content}'\"\n                )\nE               AssertionError: Expected one of ['sol'] in content, but got: 'The provided functions are insufficient for me to answer this question.'\nE               assert False\nE                +  where False = any(<generator object test_chat_non_streaming_multi_turn_tool_calling.<locals>.<genexpr> at 0x7fde3fb2cac0>)\n\ntests/verifications/openai_api/test_chat_completion.py:512: AssertionError"}, "teardown": {"duration": 0.00013326300006610836, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.0062344499999653635, "outcome": "passed"}, "call": {"duration": 3.9299180000000433, "outcome": "passed"}, "teardown": {"duration": 0.00017813500005559035, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "lineno": 425, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "add_product_tool"}, "setup": {"duration": 0.006193368000026567, "outcome": "passed"}, "call": {"duration": 2.9994865969999864, "outcome": "passed"}, "teardown": {"duration": 0.00013422299991816544, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006333822999977201, "outcome": "passed"}, "call": {"duration": 2.715613216000065, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/.venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1023, "message": "openai.BadRequestError: Error code: 400 - {'object': 'error', 'message': 'This model only supports single tool-calls at once!', 'type': 'BadRequestError', 'param': None, 'code': 400}"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 466, "message": ""}, {"path": ".venv/lib64/python3.11/site-packages/openai/_utils/_utils.py", "lineno": 279, "message": "in wrapper"}, {"path": ".venv/lib64/python3.11/site-packages/openai/resources/chat/completions/completions.py", "lineno": 914, "message": "in create"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1242, "message": "in post"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 919, "message": "in request"}, {"path": ".venv/lib64/python3.11/site-packages/openai/_base_client.py", "lineno": 1023, "message": "BadRequestError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fad7890>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'get_then_create_event_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'date': '2025-03-03', ...ents found for 2025-03-03 at 10:00'}\"}, {'response': \"{'response': 'Successfully created new event with id: e_123'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n>           response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n\ntests/verifications/openai_api/test_chat_completion.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib64/python3.11/site-packages/openai/_utils/_utils.py:279: in wrapper\n    return func(*args, **kwargs)\n.venv/lib64/python3.11/site-packages/openai/resources/chat/completions/completions.py:914: in create\n    return self._post(\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:1242: in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:919: in request\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openai.OpenAI object at 0x7fde3fad7890>\n\n    def _request(\n        self,\n        *,\n        cast_to: Type[ResponseT],\n        options: FinalRequestOptions,\n        retries_taken: int,\n        stream: bool,\n        stream_cls: type[_StreamT] | None,\n    ) -> ResponseT | _StreamT:\n        # create a copy of the options we were given so that if the\n        # options are mutated later & we then retry, the retries are\n        # given the original options\n        input_options = model_copy(options)\n    \n        cast_to = self._maybe_override_cast_to(cast_to, options)\n        options = self._prepare_options(options)\n    \n        remaining_retries = options.get_max_retries(self.max_retries) - retries_taken\n        request = self._build_request(options, retries_taken=retries_taken)\n        self._prepare_request(request)\n    \n        kwargs: HttpxSendArgs = {}\n        if self.custom_auth is not None:\n            kwargs[\"auth\"] = self.custom_auth\n    \n        log.debug(\"Sending HTTP Request: %s %s\", request.method, request.url)\n    \n        try:\n            response = self._client.send(\n                request,\n                stream=stream or self._should_stream_response_body(request=request),\n                **kwargs,\n            )\n        except httpx.TimeoutException as err:\n            log.debug(\"Encountered httpx.TimeoutException\", exc_info=True)\n    \n            if remaining_retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising timeout error\")\n            raise APITimeoutError(request=request) from err\n        except Exception as err:\n            log.debug(\"Encountered Exception\", exc_info=True)\n    \n            if remaining_retries > 0:\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                    response_headers=None,\n                )\n    \n            log.debug(\"Raising connection error\")\n            raise APIConnectionError(request=request) from err\n    \n        log.debug(\n            'HTTP Response: %s %s \"%i %s\" %s',\n            request.method,\n            request.url,\n            response.status_code,\n            response.reason_phrase,\n            response.headers,\n        )\n        log.debug(\"request_id: %s\", response.headers.get(\"x-request-id\"))\n    \n        try:\n            response.raise_for_status()\n        except httpx.HTTPStatusError as err:  # thrown on 4xx and 5xx status code\n            log.debug(\"Encountered httpx.HTTPStatusError\", exc_info=True)\n    \n            if remaining_retries > 0 and self._should_retry(err.response):\n                err.response.close()\n                return self._retry_request(\n                    input_options,\n                    cast_to,\n                    retries_taken=retries_taken,\n                    response_headers=err.response.headers,\n                    stream=stream,\n                    stream_cls=stream_cls,\n                )\n    \n            # If the response is streamed then we need to explicitly read the response\n            # to completion before attempting to access the response text.\n            if not err.response.is_closed:\n                err.response.read()\n    \n            log.debug(\"Re-raising status error\")\n>           raise self._make_status_error_from_response(err.response) from None\nE           openai.BadRequestError: Error code: 400 - {'object': 'error', 'message': 'This model only supports single tool-calls at once!', 'type': 'BadRequestError', 'param': None, 'code': 400}\n\n.venv/lib64/python3.11/site-packages/openai/_base_client.py:1023: BadRequestError"}, "teardown": {"duration": 0.0001535539998940294, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "lineno": 425, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006487736000053701, "outcome": "passed"}, "call": {"duration": 1.566394755000033, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 495, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fdb7e10>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n            assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                tool_call = assistant_message.tool_calls[0]\n                assert tool_call.function.name == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call.function.name}'\"\n                )\n                # Parse the JSON string arguments before comparing\n                actual_arguments = json.loads(tool_call.function.arguments)\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:495: AssertionError"}, "teardown": {"duration": 0.00013898400004563882, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006358492999993359, "outcome": "passed"}, "call": {"duration": 1.501812227000073, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 566, "message": "AssertionError: Expected 0 tool calls, but got 1\nassert 1 == 0\n +  where 1 = len(([{'function': {'arguments': '{\"location\": \"San Francisco, CA\"}', 'name': 'get_weather'}, 'id': 'chatcmpl-tool-0fd866ed9b1b41a8a41df072be87516c', 'type': 'function'}]))"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 566, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-text_then_weather_tool]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fd70fd0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'text_then_weather_tool', 'expected': [{'answer': ['sol'], 'num_tool_calls': 0}, {'num_tool_calls': 1, 'to...], 'type': 'object'}}, 'type': 'function'}]}, 'tool_responses': [{'response': \"{'response': '70 degrees and foggy'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n>           assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\nE           AssertionError: Expected 0 tool calls, but got 1\nE           assert 1 == 0\nE            +  where 1 = len(([{'function': {'arguments': '{\"location\": \"San Francisco, CA\"}', 'name': 'get_weather'}, 'id': 'chatcmpl-tool-0fd866ed9b1b41a8a41df072be87516c', 'type': 'function'}]))\n\ntests/verifications/openai_api/test_chat_completion.py:566: AssertionError"}, "teardown": {"duration": 0.00012574300001233496, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006289501999958702, "outcome": "passed"}, "call": {"duration": 2.3753336490000265, "outcome": "passed"}, "teardown": {"duration": 0.0001911950000703655, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "add_product_tool"}, "setup": {"duration": 0.006556168999964029, "outcome": "passed"}, "call": {"duration": 3.6386877310000045, "outcome": "passed"}, "teardown": {"duration": 0.00018226499992124445, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "lineno": 516, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006378154000003633, "outcome": "passed"}, "call": {"duration": 6.222025152000015, "outcome": "passed"}, "teardown": {"duration": 0.00016498399997999513, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "lineno": 516, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.0064656260000219845, "outcome": "passed"}, "call": {"duration": 1.503543266999941, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nassert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\n  \n  Differing items:\n  {'year': '2025'} != {'year': 2025}\n  {'month': '1'} != {'month': 1}\n  \n  Full diff:\n    {\n  -     'month': 1,\n  +     'month': '1',\n  ?              + +\n  -     'year': 2025,\n  +     'year': '2025',\n  ?             +    +\n    }"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 578, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7fde3fc5b2d0>\nmodel = 'RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\n    \n            if num_tool_calls > 0:\n                # Use the first accumulated tool call for assertion\n                tool_call = accumulated_tool_calls[0]\n                assert tool_call[\"function\"][\"name\"] == expected[\"tool_name\"], (\n                    f\"Expected tool '{expected['tool_name']}', got '{tool_call['function']['name']}'\"\n                )\n                # Parse the accumulated arguments string for comparison\n                actual_arguments = json.loads(tool_call[\"function\"][\"arguments\"])\n>               assert actual_arguments == expected[\"tool_arguments\"], (\n                    f\"Expected arguments '{expected['tool_arguments']}', got '{actual_arguments}'\"\n                )\nE               AssertionError: Expected arguments '{'month': 1, 'year': 2025}', got '{'month': '1', 'year': '2025'}'\nE               assert {'month': '1', 'year': '2025'} == {'month': 1, 'year': 2025}\nE                 \nE                 Differing items:\nE                 {'year': '2025'} != {'year': 2025}\nE                 {'month': '1'} != {'month': 1}\nE                 \nE                 Full diff:\nE                   {\nE                 -     'month': 1,\nE                 +     'month': '1',\nE                 ?              + +\nE                 -     'year': 2025,\nE                 +     'year': '2025',\nE                 ?             +    +\nE                   }\n\ntests/verifications/openai_api/test_chat_completion.py:578: AssertionError"}, "teardown": {"duration": 0.0001303940000525472, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=False", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "stream=False"}, "setup": {"duration": 0.0070026199999801975, "outcome": "passed"}, "call": {"duration": 0.00011414300001888478, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm based on config.')"}, "teardown": {"duration": 0.00011151299997891329, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "lineno": 599, "outcome": "skipped", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True]", "parametrize", "pytestmark", "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16-stream=True", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16", "case_id": "stream=True"}, "setup": {"duration": 0.007136782999964453, "outcome": "passed"}, "call": {"duration": 0.00011786300001404015, "outcome": "skipped", "longrepr": "('/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py', 606, 'Skipped: Skipping test_chat_multi_turn_multiple_images for model RedHatAI/Llama-3.3-70B-Instruct-quantized.w4a16 on provider vllm based on config.')"}, "teardown": {"duration": 0.0005846349999956146, "outcome": "passed"}}]}