{"created": 1747880475.5498443, "duration": 167.30693459510803, "exitcode": 1, "root": "/actions-runner/_work/lls-openai-client/lls-openai-client", "environment": {}, "summary": {"passed": 32, "failed": 6, "total": 38, "collected": 38}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "type": "Module"}]}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 46}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 46}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 65}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 65}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 133}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 152}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 176}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 176}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 199}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 199}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 221}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 245}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 273}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 297}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 324}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 347}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "type": "Function", "lineno": 549}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "type": "Function", "lineno": 549}]}], "tests": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 46, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.032540801999971336, "outcome": "passed"}, "call": {"duration": 1.6325293490000377, "outcome": "passed"}, "teardown": {"duration": 0.00016617799997220573, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 46, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.006959249000033196, "outcome": "passed"}, "call": {"duration": 1.006489407999993, "outcome": "passed"}, "teardown": {"duration": 0.00015278699993359623, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 65, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.009136678000004395, "outcome": "passed"}, "call": {"duration": 0.5090198729999429, "outcome": "passed"}, "teardown": {"duration": 0.0001321669999470032, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 65, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.0063600390000146945, "outcome": "passed"}, "call": {"duration": 1.004183342000033, "outcome": "passed"}, "teardown": {"duration": 0.00015312700008962565, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.006327507000037258, "outcome": "passed"}, "call": {"duration": 0.0032539939999196577, "outcome": "passed"}, "teardown": {"duration": 0.00011430500001097244, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006670654000004106, "outcome": "passed"}, "call": {"duration": 0.0034660540000004403, "outcome": "passed"}, "teardown": {"duration": 0.00011045600001580169, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.0065662900000234, "outcome": "passed"}, "call": {"duration": 0.003388709999967432, "outcome": "passed"}, "teardown": {"duration": 0.00011504600001899234, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.006604660999983025, "outcome": "passed"}, "call": {"duration": 0.0034020499999769527, "outcome": "passed"}, "teardown": {"duration": 0.00011035600005016022, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 89, "outcome": "failed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.006536967999977605, "outcome": "passed"}, "call": {"duration": 1.4480830810000498, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 108, "message": "AssertionError: assert 400 == 500\n +  where 500 = InternalServerError('Error code: 500').status_code\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 108, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae70a3390>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=False,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n>       assert case[\"output\"][\"error\"][\"status_code\"] == e.value.status_code\nE       AssertionError: assert 400 == 500\nE        +  where 500 = InternalServerError('Error code: 500').status_code\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:108: AssertionError"}, "teardown": {"duration": 0.0001249460000281033, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.006032272999959787, "outcome": "passed"}, "call": {"duration": 0.0027629880000858975, "outcome": "passed"}, "teardown": {"duration": 0.00010473499992258439, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006535937999956332, "outcome": "passed"}, "call": {"duration": 0.0031610290000116947, "outcome": "passed"}, "teardown": {"duration": 0.00010738599996784615, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.005989899999917725, "outcome": "passed"}, "call": {"duration": 0.0033002059999489575, "outcome": "passed"}, "teardown": {"duration": 0.00010692499995457183, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.005852333000007093, "outcome": "passed"}, "call": {"duration": 0.0035449880000442135, "outcome": "passed"}, "teardown": {"duration": 0.00010686600001008628, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 110, "outcome": "failed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.005830113000001802, "outcome": "passed"}, "call": {"duration": 1.3925873179999826, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 131, "message": "AssertionError: assert '400' in 'Error code: 500'\n +  where '400' = str(400)\n +  and   'Error code: 500' = InternalServerError('Error code: 500').message\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 131, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae7056b90>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=True,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n            for _chunk in response:\n                pass\n>       assert str(case[\"output\"][\"error\"][\"status_code\"]) in e.value.message\nE       AssertionError: assert '400' in 'Error code: 500'\nE        +  where '400' = str(400)\nE        +  and   'Error code: 500' = InternalServerError('Error code: 500').message\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:131: AssertionError"}, "teardown": {"duration": 0.00014261799992709712, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 133, "outcome": "passed", "keywords": ["test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.0060175920000347105, "outcome": "passed"}, "call": {"duration": 9.357489176999934, "outcome": "passed"}, "teardown": {"duration": 0.00014586800000415678, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 152, "outcome": "passed", "keywords": ["test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.00638490999995156, "outcome": "passed"}, "call": {"duration": 7.846680583999955, "outcome": "passed"}, "teardown": {"duration": 0.00016282800004319142, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 176, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.006330686999945101, "outcome": "passed"}, "call": {"duration": 3.8225840970000036, "outcome": "passed"}, "teardown": {"duration": 0.0001411369999004819, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 176, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.006340496999996503, "outcome": "passed"}, "call": {"duration": 13.90830625000001, "outcome": "passed"}, "teardown": {"duration": 0.00013911699988966575, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 199, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.006339346999993722, "outcome": "passed"}, "call": {"duration": 2.263215710000054, "outcome": "passed"}, "teardown": {"duration": 0.0001591079999343492, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 199, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.006528707000029499, "outcome": "passed"}, "call": {"duration": 16.74778400499997, "outcome": "passed"}, "teardown": {"duration": 0.000158037999995031, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 221, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006336957000030452, "outcome": "passed"}, "call": {"duration": 0.7470074000000295, "outcome": "passed"}, "teardown": {"duration": 0.00017281800001001102, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 245, "outcome": "passed", "keywords": ["test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006154187999982241, "outcome": "passed"}, "call": {"duration": 0.6275889700000334, "outcome": "passed"}, "teardown": {"duration": 0.0001194960000248102, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 273, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006272244000001592, "outcome": "passed"}, "call": {"duration": 2.0233659259999968, "outcome": "passed"}, "teardown": {"duration": 0.00013105699997595366, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 297, "outcome": "failed", "keywords": ["test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006771658999923602, "outcome": "passed"}, "call": {"duration": 1.9183863780000365, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 318, "message": "AssertionError: Expected tool call when tool_choice='required'\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 318, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae72d2350>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_tool_choice_required(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        stream = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"required\",  # Force tool call\n            stream=True,\n        )\n    \n        _, tool_calls_buffer = _accumulate_streaming_tool_calls(stream)\n    \n>       assert len(tool_calls_buffer) > 0, \"Expected tool call when tool_choice='required'\"\nE       AssertionError: Expected tool call when tool_choice='required'\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/verifications/openai_api/test_chat_completion.py:318: AssertionError"}, "teardown": {"duration": 0.00013836699997682445, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 324, "outcome": "failed", "keywords": ["test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.00623742199991284, "outcome": "passed"}, "call": {"duration": 25.898311044000025, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 344, "message": "AssertionError: Expected no tool calls when tool_choice='none'\nassert [] is None\n +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 344, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae7490a50>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_tool_choice_none(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        response = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"none\",\n            stream=False,\n        )\n    \n        assert response.choices[0].message.role == \"assistant\"\n>       assert response.choices[0].message.tool_calls is None, \"Expected no tool calls when tool_choice='none'\"\nE       AssertionError: Expected no tool calls when tool_choice='none'\nE       assert [] is None\nE        +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\nE        +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and cool, dry summers. Here's a breakdown of what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 3-4 inches (76-102 mm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Sunset districts:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Marina and Fisherman's Wharf:** Can be cooler and foggier due to their proximity to the ocean.\\n* **The Mission District and Bayview:** Can be warmer and sunnier than other parts of the city.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean currents and the city's proximity to the Pacific Ocean. When the fog rolls in, it can drop temperatures by 10-20\u00b0F (5-10\u00b0C) in a matter of minutes.\\n\\n**Overall:**\\n\\nSan Francisco's weather is known for being unpredictable and changeable. It's not uncommon to experience a range of conditions in a single day, from sunshine to fog to rain. Pack layers and be prepared for anything!\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message\n\ntests/verifications/openai_api/test_chat_completion.py:344: AssertionError"}, "teardown": {"duration": 0.00014243700002225523, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 347, "outcome": "passed", "keywords": ["test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.00636799999995219, "outcome": "passed"}, "call": {"duration": 30.54395746700004, "outcome": "passed"}, "teardown": {"duration": 0.00016622800012555672, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006374649999997928, "outcome": "passed"}, "call": {"duration": 2.9994828820001658, "outcome": "passed"}, "teardown": {"duration": 0.0001422870000169496, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.0064282820001153596, "outcome": "passed"}, "call": {"duration": 1.4548763750001399, "outcome": "passed"}, "teardown": {"duration": 0.00014252699997996388, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006188789999896471, "outcome": "passed"}, "call": {"duration": 2.412391218000039, "outcome": "passed"}, "teardown": {"duration": 0.0001447670001653023, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006863794999844686, "outcome": "passed"}, "call": {"duration": 4.436844345000054, "outcome": "passed"}, "teardown": {"duration": 0.00014647700004388753, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 375, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.00689285600014955, "outcome": "passed"}, "call": {"duration": 2.621612124000194, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 434, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))\n +    where [] = ChatCompletionMessage(content='getMonthlyExpenseSummary(month=2, year=2024)', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 434, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae6f97f90>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n>           assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\nE            +    where [] = ChatCompletionMessage(content='getMonthlyExpenseSummary(month=2, year=2024)', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n\ntests/verifications/openai_api/test_chat_completion.py:434: AssertionError"}, "teardown": {"duration": 0.00014680700019198412, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006231151999827489, "outcome": "passed"}, "call": {"duration": 2.1064471859999685, "outcome": "passed"}, "teardown": {"duration": 0.00014872699989609828, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006450782999991134, "outcome": "passed"}, "call": {"duration": 1.4261645830001726, "outcome": "passed"}, "teardown": {"duration": 0.00016437800013591186, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006300975999920411, "outcome": "passed"}, "call": {"duration": 2.2635191580000082, "outcome": "passed"}, "teardown": {"duration": 0.00014717800013386295, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.00635931800002254, "outcome": "passed"}, "call": {"duration": 4.165503957000055, "outcome": "passed"}, "teardown": {"duration": 0.00016356799983441306, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 466, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.00647429400009969, "outcome": "passed"}, "call": {"duration": 2.5844097260001035, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 516, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 516, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f0ae73217d0>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n>           assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\n\ntests/verifications/openai_api/test_chat_completion.py:516: AssertionError"}, "teardown": {"duration": 0.0001512480000656069, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "lineno": 549, "outcome": "passed", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=False"}, "setup": {"duration": 0.0069901100000606675, "outcome": "passed"}, "call": {"duration": 13.76122600099984, "outcome": "passed"}, "teardown": {"duration": 0.00015142799998102419, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "lineno": 549, "outcome": "passed", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=True"}, "setup": {"duration": 0.007182889999967301, "outcome": "passed"}, "call": {"duration": 3.675735110000005, "outcome": "passed"}, "teardown": {"duration": 0.0007143059999634715, "outcome": "passed"}}]}