{"created": 1747794084.8678882, "duration": 167.14704942703247, "exitcode": 1, "root": "/actions-runner/_work/lls-openai-client/lls-openai-client", "environment": {}, "summary": {"passed": 32, "failed": 6, "total": 38, "collected": 38}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "type": "Module"}]}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py", "outcome": "passed", "result": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 46}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 46}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "type": "Function", "lineno": 65}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "type": "Function", "lineno": 65}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 89}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "type": "Function", "lineno": 110}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 133}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 152}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 176}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 176}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "type": "Function", "lineno": 199}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "type": "Function", "lineno": 199}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 221}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 245}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 273}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 297}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 324}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "type": "Function", "lineno": 347}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 375}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "type": "Function", "lineno": 466}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "type": "Function", "lineno": 549}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "type": "Function", "lineno": 549}]}], "tests": [{"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 46, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.03259233799997219, "outcome": "passed"}, "call": {"duration": 3.2250617490000195, "outcome": "passed"}, "teardown": {"duration": 0.00018407800007480546, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 46, "outcome": "passed", "keywords": ["test_chat_non_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.007115224000017406, "outcome": "passed"}, "call": {"duration": 1.023701189999997, "outcome": "passed"}, "teardown": {"duration": 0.0001459070000464635, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "lineno": 65, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-earth", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "earth"}, "setup": {"duration": 0.006924043999902096, "outcome": "passed"}, "call": {"duration": 1.646001354999953, "outcome": "passed"}, "teardown": {"duration": 0.00014659600003597006, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "lineno": 65, "outcome": "passed", "keywords": ["test_chat_streaming_basic[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-saturn", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "saturn"}, "setup": {"duration": 0.010145932999989782, "outcome": "passed"}, "call": {"duration": 1.0246628300000111, "outcome": "passed"}, "teardown": {"duration": 0.0001661079999166759, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.006453090999912092, "outcome": "passed"}, "call": {"duration": 0.003270391999990352, "outcome": "passed"}, "teardown": {"duration": 0.0001206560000355239, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006153856999958407, "outcome": "passed"}, "call": {"duration": 0.0034941830000434493, "outcome": "passed"}, "teardown": {"duration": 0.00011456499998985237, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.00609612499999912, "outcome": "passed"}, "call": {"duration": 0.0034327199999779623, "outcome": "passed"}, "teardown": {"duration": 0.00011184499999217223, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 89, "outcome": "passed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.0066864719999557565, "outcome": "passed"}, "call": {"duration": 0.003379988000006051, "outcome": "passed"}, "teardown": {"duration": 0.00011464500005331502, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 89, "outcome": "failed", "keywords": ["test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.006570455999963087, "outcome": "passed"}, "call": {"duration": 1.1818303930000411, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 108, "message": "AssertionError: assert 400 == 500\n +  where 500 = InternalServerError('Error code: 500').status_code\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 108, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7f03b31af5d0>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=False,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n>       assert case[\"output\"][\"error\"][\"status_code\"] == e.value.status_code\nE       AssertionError: assert 400 == 500\nE        +  where 500 = InternalServerError('Error code: 500').status_code\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:108: AssertionError"}, "teardown": {"duration": 0.00012606600000708568, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_missing", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_missing"}, "setup": {"duration": 0.006152536999934455, "outcome": "passed"}, "call": {"duration": 0.0027082569999947737, "outcome": "passed"}, "teardown": {"duration": 0.00010976500004744594, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-messages_role_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "messages_role_invalid"}, "setup": {"duration": 0.006656211000063195, "outcome": "passed"}, "call": {"duration": 0.0032175400000369336, "outcome": "passed"}, "teardown": {"duration": 0.00011065499995766004, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_invalid"}, "setup": {"duration": 0.00612829600004261, "outcome": "passed"}, "call": {"duration": 0.0035481749999917156, "outcome": "passed"}, "teardown": {"duration": 0.00012094600003820233, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "lineno": 110, "outcome": "passed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tool_choice_no_tools", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tool_choice_no_tools"}, "setup": {"duration": 0.0059960099999898375, "outcome": "passed"}, "call": {"duration": 0.0033460859999649983, "outcome": "passed"}, "teardown": {"duration": 0.00011171599999215687, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "lineno": 110, "outcome": "failed", "keywords": ["test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "tools_type_invalid"}, "setup": {"duration": 0.005950417999997626, "outcome": "passed"}, "call": {"duration": 1.2089084649999222, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 131, "message": "AssertionError: assert '400' in 'Error code: 500'\n +  where '400' = str(400)\n +  and   'Error code: 500' = InternalServerError('Error code: 500').message\n +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 131, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_error_handling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-tools_type_invalid]>>\nopenai_client = <openai.OpenAI object at 0x7f03b33e0050>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'tools_type_invalid', 'input': {'messages': [{'content': 'Which planet do humans live on?', 'role': 'user'}], 'tools': [{'type': 'invalid'}]}, 'output': {'error': {'status_code': 400}}}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_chat_input_validation\"][\"test_params\"][\"case\"],\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_error_handling(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        with pytest.raises(APIError) as e:\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=case[\"input\"][\"messages\"],\n                stream=True,\n                tool_choice=case[\"input\"][\"tool_choice\"] if \"tool_choice\" in case[\"input\"] else None,\n                tools=case[\"input\"][\"tools\"] if \"tools\" in case[\"input\"] else None,\n            )\n            for _chunk in response:\n                pass\n>       assert str(case[\"output\"][\"error\"][\"status_code\"]) in e.value.message\nE       AssertionError: assert '400' in 'Error code: 500'\nE        +  where '400' = str(400)\nE        +  and   'Error code: 500' = InternalServerError('Error code: 500').message\nE        +    where InternalServerError('Error code: 500') = <ExceptionInfo InternalServerError('Error code: 500') tblen=10>.value\n\ntests/verifications/openai_api/test_chat_completion.py:131: AssertionError"}, "teardown": {"duration": 0.00012386600008085225, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 133, "outcome": "passed", "keywords": ["test_chat_non_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006119905999980801, "outcome": "passed"}, "call": {"duration": 6.663707742999918, "outcome": "passed"}, "teardown": {"duration": 0.00015257699999438046, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 152, "outcome": "passed", "keywords": ["test_chat_streaming_image[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006504372999984298, "outcome": "passed"}, "call": {"duration": 8.06344440800001, "outcome": "passed"}, "teardown": {"duration": 0.00015344700000241573, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 176, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.00651376399991932, "outcome": "passed"}, "call": {"duration": 3.8361088069999596, "outcome": "passed"}, "teardown": {"duration": 0.00014867699997012096, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 176, "outcome": "passed", "keywords": ["test_chat_non_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.0064863039999636385, "outcome": "passed"}, "call": {"duration": 13.43630289400005, "outcome": "passed"}, "teardown": {"duration": 0.0001477060000070196, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "lineno": 199, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-calendar", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "calendar"}, "setup": {"duration": 0.007068241000069975, "outcome": "passed"}, "call": {"duration": 2.122508260000018, "outcome": "passed"}, "teardown": {"duration": 0.00014241700000638957, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "lineno": 199, "outcome": "passed", "keywords": ["test_chat_streaming_structured_output[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-math", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "math"}, "setup": {"duration": 0.007048911000083535, "outcome": "passed"}, "call": {"duration": 16.199871063000046, "outcome": "passed"}, "teardown": {"duration": 0.00014483699999345845, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 221, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006646180999950957, "outcome": "passed"}, "call": {"duration": 0.7003352380000933, "outcome": "passed"}, "teardown": {"duration": 0.00012802599997030484, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 245, "outcome": "passed", "keywords": ["test_chat_streaming_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006368948000044838, "outcome": "passed"}, "call": {"duration": 0.6381186050000451, "outcome": "passed"}, "teardown": {"duration": 0.00017598800002360804, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 273, "outcome": "passed", "keywords": ["test_chat_non_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006365888000004816, "outcome": "passed"}, "call": {"duration": 2.051003413999979, "outcome": "passed"}, "teardown": {"duration": 0.00015267699996002193, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 297, "outcome": "failed", "keywords": ["test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006492353999988154, "outcome": "passed"}, "call": {"duration": 1.9525382340000306, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 318, "message": "AssertionError: Expected tool call when tool_choice='required'\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 318, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_tool_choice_required[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f03b324c210>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_tool_choice_required(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        stream = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"required\",  # Force tool call\n            stream=True,\n        )\n    \n        _, tool_calls_buffer = _accumulate_streaming_tool_calls(stream)\n    \n>       assert len(tool_calls_buffer) > 0, \"Expected tool call when tool_choice='required'\"\nE       AssertionError: Expected tool call when tool_choice='required'\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/verifications/openai_api/test_chat_completion.py:318: AssertionError"}, "teardown": {"duration": 0.00014902700002039637, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 324, "outcome": "failed", "keywords": ["test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006407809999927849, "outcome": "passed"}, "call": {"duration": 27.444757973000037, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 344, "message": "AssertionError: Expected no tool calls when tool_choice='none'\nassert [] is None\n +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 344, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]>>\nopenai_client = <openai.OpenAI object at 0x7f03b3336e10>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'input': {'messages': [{'content': 'You are a helpful assistant that can use tools to get information.', 'role': 'sys..., 'properties': {...}, 'required': [...], 'type': 'object'}}, 'type': 'function'}]}, 'output': 'get_weather_tool_call'}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases[\"test_tool_calling\"][\"test_params\"][\"case\"],  # Reusing existing case for now\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_tool_choice_none(request, openai_client, model, provider, verification_config, case):\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        response = openai_client.chat.completions.create(\n            model=model,\n            messages=case[\"input\"][\"messages\"],\n            tools=case[\"input\"][\"tools\"],\n            tool_choice=\"none\",\n            stream=False,\n        )\n    \n        assert response.choices[0].message.role == \"assistant\"\n>       assert response.choices[0].message.tool_calls is None, \"Expected no tool calls when tool_choice='none'\"\nE       AssertionError: Expected no tool calls when tool_choice='none'\nE       assert [] is None\nE        +  where [] = ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\nE        +    where ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None) = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"San Francisco! Known for its iconic Golden Gate Bridge, steep hills, and... foggy weather!\\n\\nSan Francisco's climate is mild and Mediterranean, with cool, wet winters and dry, mild summers. Here's what you can expect:\\n\\n**Seasonal Weather Patterns:**\\n\\n1. **Winter (December to February):** Cool and wet, with average highs around 57\u00b0F (14\u00b0C) and lows around 47\u00b0F (8\u00b0C). Expect some rain, with an average of 6-7 inches (15-18 cm) per month.\\n2. **Spring (March to May):** Mild and sunny, with average highs around 62\u00b0F (17\u00b0C) and lows around 50\u00b0F (10\u00b0C). Expect some fog, especially in the mornings.\\n3. **Summer (June to August):** Cool and dry, with average highs around 67\u00b0F (19\u00b0C) and lows around 54\u00b0F (12\u00b0C). Expect some fog, especially in the mornings and evenings.\\n4. **Fall (September to November):** Mild and sunny, with average highs around 64\u00b0F (18\u00b0C) and lows around 52\u00b0F (11\u00b0C). Expect some fog, especially in the mornings.\\n\\n**Microclimates:**\\n\\nSan Francisco's unique geography creates microclimates, which can vary significantly from one neighborhood to another. For example:\\n\\n* **The Haight-Ashbury and Golden Gate Park areas:** Tend to be sunnier and warmer than other parts of the city.\\n* **The Embarcadero and Fisherman's Wharf areas:** Can be cooler and foggier, especially in the mornings.\\n* **The hills:** Can be cooler and windier, especially at night.\\n\\n**Fog:**\\n\\nSan Francisco is famous for its fog, which can roll in at any time of the year. The fog is caused by the cool ocean air meeting the warm land air, creating a cool, misty veil that can obscure the city's iconic landmarks.\\n\\n**Tips:**\\n\\n* Pack layers, as the temperature can drop significantly at night, even in the summer.\\n* Bring a light jacket or sweater, even in the summer, as the fog can make it feel cool.\\n* Check the weather forecast before heading out, as the fog and wind can impact outdoor activities.\\n\\nOverall, San Francisco's weather is mild and pleasant, with a unique blend of cool, foggy mornings and sunny afternoons.\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None), stop_reason=None).message\n\ntests/verifications/openai_api/test_chat_completion.py:344: AssertionError"}, "teardown": {"duration": 0.00015609699994456605, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "lineno": 347, "outcome": "passed", "keywords": ["test_chat_streaming_tool_choice_none[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-case0", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "case0"}, "setup": {"duration": 0.006448191999993469, "outcome": "passed"}, "call": {"duration": 24.86787350499992, "outcome": "passed"}, "teardown": {"duration": 0.0001777079999101261, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006788829000015539, "outcome": "passed"}, "call": {"duration": 2.972579918999827, "outcome": "passed"}, "teardown": {"duration": 0.00014185600002747378, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006448064000096565, "outcome": "passed"}, "call": {"duration": 1.4687002089999623, "outcome": "passed"}, "teardown": {"duration": 0.0001363760000003822, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006193771999960518, "outcome": "passed"}, "call": {"duration": 2.4260536819999743, "outcome": "passed"}, "teardown": {"duration": 0.00013810699988425768, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 375, "outcome": "passed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006525847000148133, "outcome": "passed"}, "call": {"duration": 4.46261580700002, "outcome": "passed"}, "teardown": {"duration": 0.0001629879998290562, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 375, "outcome": "failed", "keywords": ["test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.007028001999970002, "outcome": "passed"}, "call": {"duration": 2.6936407809998855, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 434, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))\n +    where [] = ChatCompletionMessage(content='getMonthlyExpenseSummary(month=2, year=2024)', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 434, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_non_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f03b307ef50>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_non_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\"\n        Test cases for multi-turn tool calling.\n        Tool calls are asserted.\n        Tool responses are provided in the test case.\n        Final response is asserted.\n        \"\"\"\n    \n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        # Create a copy of the messages list to avoid modifying the original\n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        # Use deepcopy to prevent modification across runs/parametrization\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        # keep going until either\n        # 1. we have messages to test in multi-turn\n        # 2. no messages but last message is tool response\n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            # do not take new messages if last message is tool response\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                # Ensure new_messages is a list of message objects\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    # If it's a single message object, add it directly\n                    messages.append(new_messages)\n    \n            # --- API Call ---\n            response = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=False,\n            )\n    \n            # --- Process Response ---\n            assistant_message = response.choices[0].message\n            messages.append(assistant_message.model_dump(exclude_unset=True))\n    \n            assert assistant_message.role == \"assistant\"\n    \n            # Get the expected result data\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n            # --- Assertions based on expected result ---\n>           assert len(assistant_message.tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(assistant_message.tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\nE            +    where [] = ChatCompletionMessage(content='getMonthlyExpenseSummary(month=2, year=2024)', refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[], reasoning_content=None).tool_calls\n\ntests/verifications/openai_api/test_chat_completion.py:434: AssertionError"}, "teardown": {"duration": 0.0001506470000549598, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-text_then_weather_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "text_then_weather_tool"}, "setup": {"duration": 0.006363650000139387, "outcome": "passed"}, "call": {"duration": 2.1186168210001597, "outcome": "passed"}, "teardown": {"duration": 0.00015576700002384314, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-weather_tool_then_text", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "weather_tool_then_text"}, "setup": {"duration": 0.006396920000042883, "outcome": "passed"}, "call": {"duration": 1.4447523979999914, "outcome": "passed"}, "teardown": {"duration": 0.00015920700002425292, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-add_product_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "add_product_tool"}, "setup": {"duration": 0.006279494999944291, "outcome": "passed"}, "call": {"duration": 2.300233740000067, "outcome": "passed"}, "teardown": {"duration": 0.0001552469998387096, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "lineno": 466, "outcome": "passed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-get_then_create_event_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "get_then_create_event_tool"}, "setup": {"duration": 0.006392380000079356, "outcome": "passed"}, "call": {"duration": 4.269540285000176, "outcome": "passed"}, "teardown": {"duration": 0.00014856699999654666, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "lineno": 466, "outcome": "failed", "keywords": ["test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "compare_monthly_expense_tool"}, "setup": {"duration": 0.006408951000139496, "outcome": "passed"}, "call": {"duration": 2.579989034999926, "outcome": "failed", "crash": {"path": "/actions-runner/_work/lls-openai-client/lls-openai-client/tests/verifications/openai_api/test_chat_completion.py", "lineno": 516, "message": "AssertionError: Expected 1 tool calls, but got 0\nassert 0 == 1\n +  where 0 = len(([] or []))"}, "traceback": [{"path": "tests/verifications/openai_api/test_chat_completion.py", "lineno": 516, "message": "AssertionError"}], "longrepr": "request = <FixtureRequest for <Function test_chat_streaming_multi_turn_tool_calling[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-compare_monthly_expense_tool]>>\nopenai_client = <openai.OpenAI object at 0x7f03b3258f50>\nmodel = 'RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic', provider = 'vllm'\nverification_config = {'providers': {'cerebras': {'api_key_var': 'CEREBRAS_API_KEY', 'base_url': 'https://api.cerebras.ai/v1', 'model_displa...-versatile', 'meta-llama/llama-4-scout-17b-16e-instruct', 'meta-llama/llama-4-maverick-17b-128e-instruct'], ...}, ...}}\ncase = {'case_id': 'compare_monthly_expense_tool', 'expected': [{'num_tool_calls': 1, 'tool_arguments': {'month': 1, 'year': ... 'Total expenses for January 2025: $1000'}\"}, {'response': \"{'response': 'Total expenses for February 2024: $2000'}\"}]}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        chat_completion_test_cases.get(\"test_chat_multi_turn_tool_calling\", {}).get(\"test_params\", {}).get(\"case\", []),\n        ids=case_id_generator,\n    )\n    def test_chat_streaming_multi_turn_tool_calling(request, openai_client, model, provider, verification_config, case):\n        \"\"\" \"\"\"\n        test_name_base = get_base_test_name(request)\n        if should_skip_test(verification_config, provider, model, test_name_base):\n            pytest.skip(f\"Skipping {test_name_base} for model {model} on provider {provider} based on config.\")\n    \n        messages = []\n        tools = case[\"input\"][\"tools\"]\n        expected_results = copy.deepcopy(case[\"expected\"])\n        tool_responses = copy.deepcopy(case.get(\"tool_responses\", []))\n        input_messages_turns = copy.deepcopy(case[\"input\"][\"messages\"])\n    \n        while len(input_messages_turns) > 0 or (len(messages) > 0 and messages[-1][\"role\"] == \"tool\"):\n            if len(messages) == 0 or messages[-1][\"role\"] != \"tool\":\n                new_messages = input_messages_turns.pop(0)\n                if isinstance(new_messages, list):\n                    messages.extend(new_messages)\n                else:\n                    messages.append(new_messages)\n    \n            # --- API Call (Streaming) ---\n            stream = openai_client.chat.completions.create(\n                model=model,\n                messages=messages,\n                tools=tools,\n                stream=True,\n            )\n    \n            # --- Process Stream ---\n            accumulated_content, accumulated_tool_calls = _accumulate_streaming_tool_calls(stream)\n    \n            # --- Construct Assistant Message for History ---\n            assistant_message_dict = {\"role\": \"assistant\"}\n            if accumulated_content:\n                assistant_message_dict[\"content\"] = accumulated_content\n            if accumulated_tool_calls:\n                assistant_message_dict[\"tool_calls\"] = accumulated_tool_calls\n    \n            messages.append(assistant_message_dict)\n    \n            # --- Assertions ---\n            expected = expected_results.pop(0)\n            num_tool_calls = expected[\"num_tool_calls\"]\n    \n>           assert len(accumulated_tool_calls or []) == num_tool_calls, (\n                f\"Expected {num_tool_calls} tool calls, but got {len(accumulated_tool_calls or [])}\"\n            )\nE           AssertionError: Expected 1 tool calls, but got 0\nE           assert 0 == 1\nE            +  where 0 = len(([] or []))\n\ntests/verifications/openai_api/test_chat_completion.py:516: AssertionError"}, "teardown": {"duration": 0.00016158799985532823, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "lineno": 549, "outcome": "passed", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=False", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=False"}, "setup": {"duration": 0.007016738999936933, "outcome": "passed"}, "call": {"duration": 17.905435190999924, "outcome": "passed"}, "teardown": {"duration": 0.00015515699988100096, "outcome": "passed"}}, {"nodeid": "tests/verifications/openai_api/test_chat_completion.py::test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "lineno": 549, "outcome": "passed", "keywords": ["test_chat_multi_turn_multiple_images[RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True]", "parametrize", "pytestmark", "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic-stream=True", "test_chat_completion.py", "openai_api", "verifications", "tests", "lls-openai-client", ""], "metadata": {"model": "RedHatAI/Llama-4-Scout-17B-16E-Instruct-FP8-dynamic", "case_id": "stream=True"}, "setup": {"duration": 0.007078192999870225, "outcome": "passed"}, "call": {"duration": 4.513006381999958, "outcome": "passed"}, "teardown": {"duration": 0.0006958440001199051, "outcome": "passed"}}]}